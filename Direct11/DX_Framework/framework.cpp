// framework.cpp: 미리 컴파일된 헤더에 해당하는 소스 파일

#include "framework.h"

// 미리 컴파일된 헤더를 사용하는 경우 컴파일이 성공하려면 이 소스 파일이 필요합니다.
// + 설정에서 C/C++ -> 미리 컴파일된 헤더 -> 미리 컴파일된 헤더 항이 
// 만들기(/Yc)라는 설정으로 되어있어야 함

/*
미리 컴파일된 헤더 : 말 그대로 헤더들을 미리 컴파일하여 파일로서 보관해두고 있는 것
					이걸 사용할 경우 이 헤더 안에 있는 내용들은
					프로젝트 최초 빌드 이후로는 프로젝트가 새로이 빌드되기 전에
					미리 프로젝트 안에 .pch라는 파일으로 만들어지게 되고,
					이 파일 안에 들어있는 내용들은 내용 자체가 변경되지 않는 이상
					이후 프로그램을 빌드할 때는 빌드 과정을 거치지 않을 수 있음

사용하는 이유는 크게 2가지
1) 빌드하는 속도를 크게 줄일 수 있음
- 지금에야 헤더가 고작 십여가지 정도이지만,
약간만 진행해도 저기에 포함되는 헤더의 개수가 수십을 넘기게 됨
실제 게임을 만드는 수준의 프로젝트면 100개는 가벼이 넘어가게 된다
이런 대규모에서는 이걸 쓴다고 해도 빌드 시간이 수십 분은 간단히 넘어가기 때문에
이 시간을 최대한 줄이고자 사용하는 것

2) 프로젝트에서 만들어지는 각종 파일들이 
"미리 컴파일된 헤더를 포함해 사용할 것이다"라는 것을 디폴트값으로 설정할 수 있음
이렇게 설정해두면 앞으로 만들어지는 모든 클래스들이
해당 헤더에 있는 내용들을 알고 있다 가정하고 만들어지게 되므로,
굳이 헤더에 해당 내용들을 포함시키지 않더라도 저 헤더 안에 있는 내용들을 가져다 쓸 수 있게 된다


물론 주의점도 있음
1) 한 헤더 및 그 헤더에서 다루는 클래스 A에서 사용하고자 하는 다른 클래스 B의 내용물이 있다면,
미리 컴파일된 헤더 상에서 A의 #include 문은 B의 #include 문보다 나중에 와야만 함
그렇지 않으면 "아직 선언되지 않은 내용물"을 가져오려 하는 것이 되어 "정의되지 않음" 컴파일 에러가 발생함
특히 이는 VS의 자동완성 및 문법 오류 검사 기능인 InteliSence 기능에서 잡지 못하는 경우가 많아서
코드만 봐서는 해결하기가 좀 어려워질 수 있음

예외라면 클래스에 한해서 해당 클래스명 앞에 class라고 이름붙이는 것으로 해결이 가능하나,
번거롭기도 하고 만능도 아닌 탓에 가급적이면 순서 자체를 지키는 것을 권장함

2) 만약 이렇게 미리 컴파일된 헤더에 수정사항이 생긴다면,
pch 파일 자체를 다시 만들어야 되기 떄문에 빌드에 걸리는 속도가 오히려 다시 느려짐
그렇기 때문에, 빈번하게 수정될 가능성이 높아보이는 헤더는 가급적 넣지 않는 게 좋음
(허나 개발용 컴퓨터의 사양으로 밀면 되다보니 중요치는 않다)

3) 미리 컴파일된 헤더는 그 헤더를 이용해 파일을 만들기 위한 매개 코드 파일이 필요함
따라서, 미리 컴파일된 헤더와 정확히 같은 이름의 .cpp 파일을 마련해주고,
개발 툴 설정에서 해당 파일의 설정을 위에 적어둔 설정대로 세팅해야만 정상적으로 동작


마지막으로
본 파일은 그 미리 컴파일된 헤더를 만들기 위한 촉매 외의 다른 용도는 일절 없음
그러다보니 속도를 보장하기 위해 여기에 코드를 적는 건 안 되나,

각주는 문제없음
따라서 나중에 설명할 위치가 애매한 부분이 있을 때 이 파일에 설명을 적을 예정



*/
