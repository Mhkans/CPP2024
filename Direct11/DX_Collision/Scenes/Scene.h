#pragma once
class Scene
// Scene : 사전적인 의미로는 "장면"이라는 뜻
// 게임 프로그래밍에서는 "최소 하나의 게임 진행이 이뤄지는 공간"이라는 의미로 사용

// 앞으로 우리는 DX에서 뭔가 화면을 하나 만들 때 이 Scene을 상속받은 클래스를 만들고
// 거기에 각종 오브젝트 등의 멤버를 만들고 초기화 및 업데이트를 하는 식으로 관리할 예정
// 각각의 Scene이 게임의 특정 단계를 담당하도록 설계한 후
// 필요에 따라 그 Scene을 교체해서 사용하여 게임을 진행시키는 식으로 만들게 됨
{
// 본 클래스는 자식에게 각종 기능들을 만들라고 강제할 용도로 만드는,
// 개념상으로는 인터페이스에 가까운 클래스
// 따라서 어떤 멤버도 갖추지 않고, 모든 Scene이 구현해야만 하도록 강제하는 함수들을 수록할 것

public:
	virtual ~Scene() {};
	// 기본적으로 만들어지는 Scene들은 프로그램 상에서 자식 클래스가 아닌 부모 클래스인 Scene으로서 관리함
	// 따라서 자식 클래스를 그 Scene에 등록해 이용하느 게 태반인 본 프로글매에선
	// 자식 클래스의 소멸자가 어떤 자식 클래스인지 모르는 상태에서도 호출될 수 있도록 가상함수로 만들어야 함
	// 단, 부모 클래스로서 호출해야 하는 경우가 가끔 생기기도 하므로 일단 남겨는 둬야 한다

	virtual void Update() = 0;
	// 프로그램이 실행되는 와중, 시간이 경과하면서 장면을 업데이트해야 하는 부분을 이 함수에서 처리
	virtual void Render() = 0;
	// 이 화면을 그릴 때 어떤 처리가 이뤄질지를 이 함수에서 관리
	virtual void PostRender() {};
};