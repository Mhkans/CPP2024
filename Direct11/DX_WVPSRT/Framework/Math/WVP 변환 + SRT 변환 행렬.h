#pragma once
/*

1. 컴퓨터 그래픽스에서 공간을 기록하는 방법

3D 공간 그 자체를 한 번 생각해봅시다 :
어떤 물체가 어느 위치에 있는지, 이를 무엇을 기준으로 어떻게 판단하는가?

-> 어떻게든 하나의 기준 = 원점을 정의하고, 그 원점에서 X축/Y축/Z축의 방향을 정한 뒤에
각각의 축 방향으로 얼마만큼 떨어져있는지를 측정하는 것으로 해당 물체가 어디에 있는지를 인식 및 정의하게 된다

이 경우 필연적으로 따져봐야 하는 요소가 2가지가 있게 됨 :
 * 원점은 어떻게 정의하는가?
  -> 중요도 자체는 높지만, 결국 "어디서 보고 싶은 것인지"를 정하는 것 뿐이기 떄문에
     원하는 적당한 지점 하나를 잡아두면 끝
 * 저 3개의 축이 어느 방향을 가리키도록 하는지 어떻게 정하는가?
  -> 다르게 말하면 "시점"의 방향을 어떻게 잡는가의 이야기이므로,
     위에서 결정된 원점에서 보고자 하는 오브젝트가 있는 방향을 삼거나
     아예 시점 자체를 기준점으로 삼아 오브젝트의 배치를 그에 맞게 하는 등도 가능

위의 2개를 정하면 3D 공간에서 물체가 어디에 있는지까지는 어렵지 않게 정리할 수 있음
하지만, 3D 공간을 2D 스크린 등에 그래픽으로서 출력하겠다 = 하나의 화면에 출력되도록 2D로서 변환을 시키고자 한다
이 경우, 단순히 방향만 결정하는 게 아니라 그렇게 바라보는 시야의 어느 부분을 그림으로서 담을 것인지
그 범위까지 지정해야 함

따라서, 컴퓨터 그래픽에서 뭔가를 출력할 떄 거치는 과정은 다음과 같이 정리할 수 있다 :
 * 사물들의 위치를 측정하기 위해, 기준점으로 삼을 원점을 지정
 * 원점을 통해 사물들의 위치를 측정
 * 원점을 통해 정의된 전체 3D 공간 중 어느 지점에서 어느 방향을 바라볼 것인지를 결정
 * 그렇게 바라보고 있는 범위를 어디부터 어디까지로 할 것인지를 설정
 * 시점 기준으로 바라보고 있는 물건들이 어떻게 보이는지를 따로 기록
 * 그렇게 기록된 데이터를 하나의 화면으로 출력할 수 있는 내용으로 변환
 * 이를 화면에 최종적으로 출력

위에서 설명한 것 외에도 원근법/물체의 겹침 등등 시야에 따라 생각해야 하는 것들이 매우 많기 때문에
각 오브젝트들의 위치 데이터 하나만 가지고는 곧바로 화면에 처리를 할 수 없음

이걸 해결하기 위해, 데이터상으로 존재하는 오브젝트들의 정보를
최종적으로 출력할 수 있는 데이터로 바꾸는 과정에 필요한 변환 작업을 WVP 변환이라 하며,
그 WVP 변환을 하기 위해 같이 다뤄야 하는, 
정확히는 WVP 변환 중 W 변환을 하기 위해 필요한 행렬이 SRT 변환 행렬


2. SRT 변환 행렬
변환 행렬 : 어떤 위치 벡터가 주어졌을 때, 그 위치 벡터의 크기/회전/위치 등을 변환시키는 행렬
-> 주어진 위치 벡터를 우리가 원하는 형태로 변환시키기 위해 우리가 계산으로 구해야 할 행렬들

=====================================================================
삼각함수
행렬의 곱셈
단위행렬/역행렬
(수학적 의미의)벡터

이하의 설명은 위 개념들을 어느 정도 기억하고 있다고 전재하고 설명하고 있음
======================================================================

어떤 오브젝트의 3차원에서의 위치를 따질 때, 보통은 다음과 같은 식으로 표기 :
(x, y, z)
이는 X축으로 x만큼, Y축으로 y만큼, Z축으로 z만큼 원점에서 멀어져있다는 뜻
-> 원점 (0,0,0)에서 X, Y, Z축 각각의 방향으로 x,y,z만큼 뻗어나간 벡터라고 말할 수 있다

-> 이 벡터에 행렬을 곱해 그 값을 변환시킨다면
해당 벡터 = 해당 좌표가 전체 좌표계에서 위치하는 지점까지 변경된다는 의미가 됨

따라서, 3D 공간에 위치한 오브젝트의 좌표를 바꾸고 싶다면
그 오브젝트를 표시하는 데 사용되는 벡터의 값에 적절한 행렬을 곱해서 벡터의 값을 변환시켜야 한다는 결론이 나온다
<- 여기에 사용되는 행렬이 변환 행렬

3D 그래픽 기준으로 변환 행렬은 총 3가지가 존재
 * Scale(크기)
 * Rotation(회전)
 * Translation(위치/이동)
이 3가지 행렬을 통틀어서 SRT 변환 행렬이라 부르며,
이 SRT 변환 행렬을 구해야 오브젝트의 위치를 행렬로서 표현할 수 있께 됨
저 SRT 변환 행렬 자체에 대해서는 Transform을 설명할 떄 상세히 다룸

왜 굳이 행렬로서 표현해야 하냐면
 * 벡터, 즉 좌표를 계산하는 데 사용해야 하므로
   그 벡터와 곱연산을 할 수 있는 형태로 가공되어야 한다
   그런 용도로는 행렬이 제일 나은 저장방식이기 때문
 * 바로 뒤에 다룰 WVP 변환 역시 행렬을 이용하는 방식이기 때문에,
   정확히는 W 변환 그 자체가 SRT 변환 행렬을 다루는 내용이기 때문에
   그 규격에 맞추기 위해 행렬로서 표현해야 하는 것


3. WVP 변환
- 우리는 이 WVP 변환을 100% 온전히 다루진 않음
- 이는 우리가 다루는 것이 3D가 아닌 2D이기 때문
- 3D 공간을 이용하는 어지간한 엔진은 전부 사용하는 개념이라 중요하긴 하나,
- 전반적으로 수학 관련 설명이 너무 많이 들어감
- 수학 관련 내용들을 전부 설명하긴 힘들기 덈누에, 가능한 최소한만큼만 설명할 예정

WVP 변환이라는 개념은 3D 공간을 다룬다면 (어느 엔진에서건) 기본적으로 사용하는 개념
DX의 그래픽 파이프라인을 설명할 떄 공간에 대해 설명한 적 있지만,
여기선 그 각각에 대해 좀 더 상세하게 설명함

WVP 변환은 World 변환 / View 변환 / Projection 변환 3개를 묶어 칭하는 말으로
이 작업을 통해 오브젝트가 화면상의 어디에 위치해있을 것인지를 결정하는 변환 작업

A. World(공간) 변환

3D/2D 공간에서 오브젝트가 어디에 위치했는지 정의하기 위해선
위치의 기준점이 될 원점을 정해야 할 필요가 있음

3D 그래픽의 이론에서 이 World이라는 개념은 다음과 같은 의미 :
각 오브젝트의 절대좌표
-> 실제 공간에서 정확히 어느 위치에 존재하는지를 이 world에 저장

문제는 그 공간이라는 것 자체가 어디를 기준점으로 하는지를 명확히 정의하지 않고 있음
-> 한 물체의 위치가 어디에 존재한느가를 명확히 명시하려면
그 때마다 어디를 기준점으로 할 것인지를 결정해줘야 함
-> 3D 공간에서 위치를 표현하려면 반드시 그 물체가 어느 지점을 원점으로 하고 있는 World에 해당되는지
이를 알릴 필요가 있다
(같은 위치에 있는 오브젝트라 하더라도 기준점이 어디냐에 따라 좌표값이 달라지니,
그 좌표값을 계산할 원점이 기록되어 있는 World 중 어느 것을 쓸 것인지 결정해야 한다는 뜻)

고로, 오브젝트의 위치에 기준점으로 사용할 World를 적용(=오브젝트의 SRT 변환 행렬에 World 행렬을 곱셈)하여
실제 공간에선 어디에 위치해있는지를 최종적으로 표기할 수 있도록 변환을 해줘야 함
그게 World 변환

World 변환 과정은 다음과 같다 : 
ㄱ - 기준점이 될 전체 공간의 World를 확보
ㄴ - 오브젝트의 SRT 행렬을 구함
ㄷ - 오브젝트의 SRT 행렬에 World를 곱하여 전체 실제 공간 중 어디에 위치해있는지,
     그 동시에 어떻게 위치해있는지(어떻게 생겼는지)를 확인

자세한 적용 과정은 역시 Transform을 설명할 떄 다룸


이 World 행렬을 반드시 익혀둬야 하는 이유 :
우리가 오브젝트의 위치를 관리할 떄, 전체 공간만을 기준으로 하지 않는 경우가 훨씬 많기 때문
-> 각 오브젝트들은 전체 공간을 기준으로 배치될 수도 있겠지만
다른 오브젝트의 위치에 종속되어, 종속된 오브젝트의 위치를 항상 따라가는 경우 역시 충분히 많다

이런 것을 전체 공간의 좌표계로만 계산할 경우
사람의 팔/손가락/엄지 등등의 좌표를 일일이 지정해주고 움직일 때도 하나하나 계산하여 움직여야 하는데
사람 그 자체의 심장을 기준점으로 할 경우
사람이 움직일 때 위에서 이야기했던 부위들의 좌표는 우리가 직접 일일이 계산할 필요 없이
"심장에서 이 방향으로 이만큼 떨어져있다"라고 정의해두면 그 심장의 움직임에 맞춰
각각의 신체들도 알아서 심장의 좌표에 맞춰 재계산될 것
-> 사람 좌표 하나만 가지고 사람의 사지가 움직이는 것을 구현할 수 있음

한 줄로 정의하면
"공간 그 자체를 정의, 이후 다른 오브젝트들이 어느 공간에 위치하는지를 표시하는 역할"


B. View(뷰) 변환
World 변환을 통해 공간의 기준점은 정의되었음
이제 공간 자체를 완전히 정의하기 위해선 그 공간 내에서의 "방향"을 정의해야 한다
즉, 원점에서 바라보는 "시점"을 정의하는 변환

정확히는, 오브젝트들을 카메라가 위치한 공간에서 바라보는 것처럼 보이게,
각 오브젝트들의 좌표를 카메라의 위치/회전 등등에 맞게 변환(회전)해주는 작업

View 변환은 크게 2가지 방법이 있음 : 
 * Roll/Pitch/Yaw라는 3가지 축을 이용해 만들어지는 각 회전행렬을 곱하는 방식
 * 카메라의 위치 자체를 벡터로서 구한 뒤, 이 벡터의 회전축을 구해 각 오브젝트에 적용하는 방식

3D까지 배우게 된다면 이 둘을 전부 배우지만,
2D 반에서는 위쪽, 그마저도 Yaw 딱 하나만을 이용해서 그리므로 깊게 다루지는 않을 예정


C. Projection(투영) 변환
위의 두 단계를 거쳐 각 오브젝트들의 위치, 회전 등을 시점에 맞게 변환 완료했으면,
이제 각 오브젝트들은 카메라의 위치에 따라 원근법에 맞게 커지거나 작아져야 함

실제로는 각각 고유의 값을 가지고 있는 오브젝트들의 실제 크기지만,
시점에 따라선 이게 크게 보일 수도 있고 작게 보일 수도 있음

이런 것을 거리 등에 따라 실제 화면에 얼마만큼 크게 그릴 것인지를 결정해야 하는데,
이를 투영 행렬을 만들어 위까지의 단계의 결과로 만들어진 행렬에 곱해주는 식으로 정리함
카메라(=원점 및 시점)에서 일정 거리 덜어진 만큼을 기준으로 그보다 가까우면 더 크게, 멀면 더 작게 그리는 식

이전까지 DX에서 화면을 그릴 때 -1 ~ 1까지의 상대좌표로 좌표계가 구성되었던 것과 달리
이번에 만든 프로젝트는 API 때와 마찬가지인 절대좌표를 이용하게 되어있는데,
이게 이 투영 변환을 통해 화면상에 그려지고 있는 그래픽의 좌표가
기존의 -1 ~ 1까지였던 것이 0 ~ (화면 가로/세로)로 재구성되었기 때문


간단히 말하면 : 
"우리가 보는 화면이 실제 공간상에서 어디부터 어디까지를 표시하고 있는 것인지를 결정하는 변환"



이렇게 다룬 WVP 변환 + SRT 변환 행렬을 적용시켜 만들어진 것이 본 프로젝트로,
이렇게 구성된 내용물들을 직접 보면서 이 이론이 어떻게 적용되었는지를 해설하고
그에 맞춰서 새로 도형 및 이런저런 움직이는 작업을 진행해볼 예정

*/